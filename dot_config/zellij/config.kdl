keybinds clear-defaults=true {
    normal {
        // switch to other modes
        bind "r" { SwitchToMode "Resize"; }
        bind "p" { SwitchToMode "Pane"; }
        bind "m" { SwitchToMode "Move"; }
        bind "t" { SwitchToMode "Tab"; }
        bind "s" { SwitchToMode "Scroll"; }
        bind "o" { SwitchToMode "Session"; }
        // focus pane
        bind "h" { MoveFocus "Left"; }
        bind "j" { MoveFocus "Down"; }
        bind "k" { MoveFocus "Up"; }
        bind "l" { MoveFocus "Right"; }
        // focus tab
        bind "H" { GoToPreviousTab; }
        bind "L" { GoToNextTab; }
    }
    locked {
        bind "Ctrl g" { SwitchToMode "Normal"; }
    }
    resize {
        // resize pane by direction
        bind "h" { Resize "Increase Left"; }
        bind "j" { Resize "Increase Down"; }
        bind "k" { Resize "Increase Up"; }
        bind "l" { Resize "Increase Right"; }
        // resize pane by amount
        bind "+" "=" { Resize "Increase"; }
        bind "-" { Resize "Decrease"; }
    }
    pane {
        // focus pane
        bind "h" { MoveFocus "Left"; }
        bind "j" { MoveFocus "Down"; }
        bind "k" { MoveFocus "Up"; }
        bind "l" { MoveFocus "Right"; }
        // new pane
        bind "n" { NewPane; SwitchToMode "Locked"; }
        bind "s" { NewPane "Down"; SwitchToMode "Locked"; }
        bind "v" { NewPane "Right"; SwitchToMode "Locked"; }
        bind "t" { NewPane "stacked"; SwitchToMode "Locked"; }
        // close pane
        bind "d" { CloseFocus; SwitchToMode "Locked"; }
        // rename pane
        bind "r" { SwitchToMode "RenamePane"; PaneNameInput 0; }
        // fullscreen, embed, floating frames
        bind "f" { ToggleFocusFullscreen; SwitchToMode "Locked"; }
        bind "w" { ToggleFloatingPanes; SwitchToMode "Locked"; }
        bind "e" { TogglePaneEmbedOrFloating; SwitchToMode "Locked"; }
    }
    move {
        // move pane by direction
        bind "h" { MovePane "Left"; }
        bind "j" { MovePane "Down"; }
        bind "k" { MovePane "Up"; }
        bind "l" { MovePane "Right"; }
        // move tab
        bind "H" { MoveTab "Left"; }
        bind "L" { MoveTab "Right"; }
    }
    tab {
        // new tab
        bind "n" { NewTab; SwitchToMode "Locked"; }
        // close tab
        bind "d" { CloseTab; SwitchToMode "Locked"; }
        // focus tab by direction
        bind "h" { GoToPreviousTab; }
        bind "l" { GoToNextTab; }
        // rename tab
        bind "r" { SwitchToMode "RenameTab"; TabNameInput 0; }
        // sync input between all panes in tab
        bind "s" { ToggleActiveSyncTab; SwitchToMode "Locked"; }
        // break pane to new tab
        bind "b" { BreakPane; SwitchToMode "Locked"; }
    }
    scroll {
        // open in editor
        bind "e" { EditScrollback; SwitchToMode "Locked"; }
        // entersearch
        bind "/" { SwitchToMode "EnterSearch"; SearchInput 0; }
    }
    search {
        // switch to other modes
        bind "/" { SwitchToMode "EnterSearch"; SearchInput 0; }
        bind "Esc" { SwitchToMode "Scroll"; }
        // next/previous search result
        bind "n" { Search "Down"; }
        bind "N" { Search "Up"; }
        // search options
        bind "c" { SearchToggleOption "CaseSensitivity"; }
        bind "w" { SearchToggleOption "Wrap"; }
        bind "o" { SearchToggleOption "WholeWord"; }
    }
    entersearch {
        bind "Esc" { SwitchToMode "Scroll"; }
        bind "Enter" { SwitchToMode "Search"; }
    }
    renametab {
        bind "Esc" { UndoRenameTab; SwitchToMode "Tab"; }
    }
    renamepane {
        bind "Esc" { UndoRenamePane; SwitchToMode "Pane"; }
    }
    session {
        // detach
        bind "d" { Detach; }
        // session manager
        bind "w" {
            LaunchOrFocusPlugin "session-manager" {
                floating true
                move_to_focused_tab true
            }
            SwitchToMode "Locked"
        }
        // configuration
        bind "c" {
            LaunchOrFocusPlugin "configuration" {
                floating true
                move_to_focused_tab true
            }
            SwitchToMode "Locked"
        }
        // plugin manager
        bind "p" {
            LaunchOrFocusPlugin "plugin-manager" {
                floating true
                move_to_focused_tab true
            }
            SwitchToMode "Locked"
        }
        // about
        bind "a" {
            LaunchOrFocusPlugin "zellij:about" {
                floating true
                move_to_focused_tab true
            };
            SwitchToMode "Locked"
        }
        // share
        bind "s" {
            LaunchOrFocusPlugin "zellij:share" {
                floating true
                move_to_focused_tab true
            };
            SwitchToMode "Locked"
        }
    }
    shared {
        bind "Ctrl q" { Quit; }
    }
    shared_except "locked" {
        bind "Enter" "Esc" { SwitchToMode "Locked"; }
    }
    shared_among "scroll" "search" {
        // scroll
        bind "j" { ScrollDown; }
        bind "k" { ScrollUp; }
        // scroll by larger amounts
        bind "Ctrl d" { HalfPageScrollDown; }
        bind "Ctrl u" { HalfPageScrollUp; }
        // scroll to top/bottom
        bind "G" { ScrollToBottom; }
        bind "g" { ScrollToTop; }
        bind "Esc" { ScrollToBottom; SwitchToMode "Locked"; }
    }
}

// Plugin aliases - can be used to change the implementation of Zellij
// changing these requires a restart to take effect
plugins {
    tab-bar location="zellij:tab-bar"
    status-bar location="zellij:status-bar"
    strider location="zellij:strider"
    compact-bar location="zellij:compact-bar" {
        tooltip "F1" // choose a keybinding to toggle the hints
    }
    session-manager location="zellij:session-manager"
    welcome-screen location="zellij:session-manager" {
        welcome_screen true
    }
    filepicker location="zellij:strider" {
        cwd "/"
    }
    configuration location="zellij:configuration"
    plugin-manager location="zellij:plugin-manager"
    about location="zellij:about"
}

// Plugins to load in the background when a new session starts
load_plugins {
  // "file:/path/to/my-plugin.wasm"
  // "https://example.com/my-plugin.wasm"
}

// Choose what to do when zellij receives SIGTERM, SIGINT, SIGQUIT or SIGHUP
// eg. when terminal window with an active zellij session is closed
// (Requires restart)
// Options:
//   - detach (Default)
//   - quit
//
// on_force_close "quit"

//  Send a request for a simplified ui (without arrow fonts) to plugins
//  Options:
//    - true
//    - false (Default)
//
// simplified_ui true

// Choose the path to the default shell that zellij will use for opening new panes
// Default: $SHELL
//
default_shell "fish"

// Choose the path to override cwd that zellij will use for opening new panes
//
// default_cwd ""

// Toggle between having pane frames around the panes
// Options:
//   - true (default)
//   - false
//
// pane_frames true

// Toggle between having Zellij lay out panes according to a predefined set of layouts whenever possible
// Options:
//   - true (default)
//   - false
//
// auto_layout true

// Whether sessions should be serialized to the cache folder (including their tabs/panes, cwds and running commands) so that they can later be resurrected
// (Requires restart)
// Options:
//   - true (default)
//   - false
//
// session_serialization false

// Whether pane viewports are serialized along with the session, default is false
// (Requires restart)
// Options:
//   - true
//   - false (default)
//
// serialize_pane_viewport true

// Scrollback lines to serialize along with the pane viewport when serializing sessions, 0
// defaults to the scrollback size. If this number is higher than the scrollback size, it will
// also default to the scrollback size. This does nothing if `serialize_pane_viewport` is not true.
// (Requires restart)
//
// scrollback_lines_to_serialize 10000

// Define color themes for Zellij
// For more examples, see: https://github.com/zellij-org/zellij/tree/main/example/themes
// Once these themes are defined, one of them should to be selected in the "theme" section of this file
//
// themes {
//     dracula {
//         fg 248 248 242
//         bg 40 42 54
//         red 255 85 85
//         green 80 250 123
//         yellow 241 250 140
//         blue 98 114 164
//         magenta 255 121 198
//         orange 255 184 108
//         cyan 139 233 253
//         black 0 0 0
//         white 255 255 255
//     }
// }

// Choose the theme that is specified in the themes section.
// Default: default
//
theme "tokyonight-night"

// The name of the default layout to load on startup
// Default: "default"
// (Requires restart)
//
default_layout "compact"

// Choose the mode that zellij uses when starting up.
// Default: normal
//
default_mode "locked"

// Toggle enabling the mouse mode.
// On certain configurations, or terminals this could
// potentially interfere with copying text.
// (Requires restart)
// Options:
//   - true (default)
//   - false
//
// mouse_mode false

// Configure the scroll back buffer size
// This is the number of lines zellij stores for each pane in the scroll back
// buffer. Excess number of lines are discarded in a FIFO fashion.
// (Requires restart)
// Valid values: positive integers
// Default value: 10000
//
// scroll_buffer_size 10000

// Provide a command to execute when copying text. The text will be piped to
// the stdin of the program to perform the copy. This can be used with
// terminal emulators which do not support the OSC 52 ANSI control sequence
// that will be used by default if this option is not set.
// Examples:
//
// copy_command "xclip -selection clipboard" // x11
// copy_command "wl-copy"                    // wayland
// copy_command "pbcopy"                     // osx

// Choose the destination for copied text
// Allows using the primary selection buffer (on x11/wayland) instead of the system clipboard.
// Does not apply when using copy_command.
// Options:
//   - system (default)
//   - primary
//
// copy_clipboard "primary"

// Enable or disable automatic copy (and clear) of selection when releasing mouse
// Default: true
//
// copy_on_select false

// Path to the default editor to use to edit pane scrollbuffer
// Default: $EDITOR or $VISUAL
//
scrollback_editor "nvim"

// When attaching to an existing session with other users,
// should the session be mirrored (true)
// or should each user have their own cursor (false)
// (Requires restart)
// Default: false
//
// mirror_session true

// The folder in which Zellij will look for layouts
// (Requires restart)
//
// layout_dir "/path/to/my/layout_dir"

// The folder in which Zellij will look for themes
// (Requires restart)
//
// theme_dir "/path/to/my/theme_dir"

// Enable or disable the rendering of styled and colored underlines (undercurl).
// May need to be disabled for certain unsupported terminals
// (Requires restart)
// Default: true
//
// styled_underlines false

// Enable or disable writing of session metadata to disk (if disabled, other sessions might not know
// metadata info on this session)
// (Requires restart)
// Default: false
//
// disable_session_metadata true

// Enable or disable support for the enhanced Kitty Keyboard Protocol (the host terminal must also support it)
// (Requires restart)
// Default: true (if the host terminal supports it)
//
// support_kitty_keyboard_protocol false

// Whether to make sure a local web server is running when a new Zellij session starts.
// This web server will allow creating new sessions and attaching to existing ones that have
// opted in to being shared in the browser.
// When enabled, navigate to http://127.0.0.1:8082
// (Requires restart)
// 
// Note: a local web server can still be manually started from within a Zellij session or from the CLI.
// If this is not desired, one can use a version of Zellij compiled without
// `web_server_capability`
// 
// Possible values:
// - true
// - false
// Default: false
//
// web_server true

// Whether to allow sessions started in the terminal to be shared through a local web server, assuming one is
// running (see the `web_server` option for more details).
// (Requires restart)
// 
// Note: This is an administrative separation and not intended as a security measure.
// 
// Possible values:
// - "on" (allow web sharing through the local web server if it
// is online)
// - "off" (do not allow web sharing unless sessions explicitly opt-in to it)
// - "disabled" (do not allow web sharing and do not permit sessions started in the terminal to opt-in to it)
Default: "disabled"
// 
// web_sharing "on"

// The ip address the web server should listen on when it starts
// Default: "127.0.0.1"
// (Requires restart)
//
// web_server_ip "127.0.0.1"


// A path to a certificate file to be used when setting up the web client to serve the
// connection over HTTPs
//
// web_server_cert "/path/to/my/cert.pem"

// A path to a key file to be used when setting up the web client to serve the
// connection over HTTPs
//
// web_server_key "/path/to/my/key.pem"

// Whether to enforce https connections to the web server when it is bound to localhost
// (127.0.0.0/8)
//
// Note: https is ALWAYS enforced when bound to non-local interfaces
//
// Default: false
//
// enforce_https_for_localhost true

// The port the web server should listen on when it starts
// Default: 8082
// (Requires restart)
//
// web_server_port 8082

// Whether to stack panes when resizing beyond a certain size
// Default: true
//
// stacked_resize false

// Whether to show release notes on first version run
// Default: true
//
// show_release_notes false

// Whether to enable mouse hover effects and pane grouping functionality
// Default: true
//
// advanced_mouse_actions false

// A command to run (will be wrapped with sh -c and provided the RESURRECT_COMMAND env variable)
// after Zellij attempts to discover a command inside a pane when resurrecting sessions, the STDOUT
// of this command will be used instead of the discovered RESURRECT_COMMAND
// can be useful for removing wrappers around commands
// Note: be sure to escape backslashes and similar characters properly
//
// post_command_discovery_hook "echo $RESURRECT_COMMAND | sed <your_regex_here>"


web_client {
    font "monospace"
}

// A fixed name to always give the Zellij session.
// Consider also setting `attach_to_session true,`
// otherwise this will error if such a session exists.
// Default: <RANDOM>
// 
session_name "main"
 
// When `session_name` is provided, attaches to that session
// if it is already running or creates it otherwise.
// Default: false
// 
attach_to_session true

// Whether to show tips on startup
// Default: true
// 
show_startup_tips false
