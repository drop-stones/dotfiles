#!/usr/bin/env zsh

# Function to execute a command with temporarily set environment variables
# e.g., execute_with_wslenv HOME="/path/to/home" <command> <args>

function execute_with_wslenv {
  local env_vars=()      # Array to hold the environment variables
  local wslenv_update=() # Array to hold environment variables to be added to WSLENV
  local cmd=()           # Array to hold the command and its arguments

  # Parse the input arguments
  while [[ $# -gt 0 ]]; do
    if [[ $1 =~ ^([A-Za-z_][A-Za-z0-9_]*)=(.*)$ ]]; then
      # If the argument matches the pattern of "VAR=VALUE", store it in env_vars
      local key="${match[1]}"
      local value="${match[2]}"
      env_vars+=("$key=$value") # Add the environment variable to env_vars array
      wslenv_update+=("$key")   # Add the variable to wslenv_update for WSLENV
    else
      # After all environment variables are processed, treat the rest as the command
      cmd=("$@")
      break
    fi
    shift # Move to the next argument
  done

  # If no command is specified, print an error message
  if [[ ${#cmd[@]} -eq 0 ]]; then
    echo "Error: No command specified." >&2
    return 1
  fi

  # Save the current value of WSLENV to restore it after execution
  local original_wslenv="$WSLENV"

  # If there are environment variables to add to WSLENV, update it temporarily
  if [[ ${#wslenv_update[@]} -gt 0 ]]; then
    # Join the variable names using ":" to append them to the current WSLENV
    export WSLENV="$original_wslenv:$(
      IFS=:
      echo "${wslenv_update[*]}"
    )"
  fi

  # Now, temporarily set the environment variables and execute the command
  # `env` is used to set environment variables for the command execution without affecting the current shell environment
  env "${env_vars[@]}" "${cmd[@]}" # Execute the command with the temporary environment variables

  # Restore the original WSLENV value to avoid persistent changes
  export WSLENV="$original_wslenv"
}
