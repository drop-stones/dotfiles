#!/usr/bin/env zsh

# Print clipboard content to stdout.
# Behavior:
# - Return 0 if a provider ran successfully (even if the output is empty).
# - Return non-zero if no suitable provider exists or the provider failed.
#
# Note on CRLF normalization:
# - Windows providers (PowerShell/Get-Clipboard, win32yank) typically emit CRLF (\r\n).
#   We strip CR with "tr -d '\r'" so pasted text doesn't contain stray ^M that can
#   break ZLE rendering, history entries, or command arguments.

function __get_clipboard_content {
  emulate -L zsh
  setopt err_return pipefail no_aliases

  {
    # WSL2: only win32yank.exe; missing -> error
    if is-wsl2; then
      if command -v win32yank.exe >/dev/null 2>&1; then
        # Normalize CRLF to LF to avoid stray ^M in ZLE/history/commands.
        win32yank.exe -o 2>/dev/null | tr -d '\r'
        return 0
      else
        return 1
      fi
    fi

    # MSYS2: prefer PowerShell, fallback to win32yank
    if is-msys2; then
      if command -v powershell.exe >/dev/null 2>&1; then
        # PowerShell outputs CRLF; remove CR to normalize to LF.
        powershell.exe -NoProfile -Command "Get-Clipboard" 2>/dev/null | tr -d '\r'
        return 0
      elif command -v win32yank >/dev/null 2>&1; then
        # Normalize CRLF to LF for win32yank on MSYS2.
        win32yank -o 2>/dev/null | tr -d '\r'
        return 0
      else
        return 1
      fi
    fi

    # macOS
    if is-macos; then
      if command -v pbpaste >/dev/null 2>&1; then
        # pbpaste emits LF already; no normalization required.
        pbpaste
        return 0
      else
        return 1
      fi
    fi

    # Wayland
    if is-wayland; then
      if command -v wl-paste >/dev/null 2>&1; then
        wl-paste --no-newline 2>/dev/null
        return 0
      else
        return 1
      fi
    fi

    # X11
    if is-x11; then
      if command -v xclip >/dev/null 2>&1; then
        xclip -selection clipboard -o 2>/dev/null
        return 0
      elif command -v xsel >/dev/null 2>&1; then
        xsel --clipboard --output 2>/dev/null
        return 0
      else
        return 1
      fi
    fi

    # Unknown/unsupported environment
    return 1
  } always {
    # Self-unload: this function is autoloaded ad-hoc by the caller.
    # Removing the definition here does NOT affect this ongoing invocation,
    # but keeps the functions table clean; the next call will autoload again.
    unfunction __get_clipboard_content
  }
}
