{{- if eq .chezmoi.os "windows" -}}

function AssertCommandExists([string] $command)
{
  if (!(Get-Command "$command"))
  {
    Write-Error "$command not found"
    Exit 1
  }
}

function ScoopInstall([string] $package)
{
  AssertCommandExists "scoop"
  If ((scoop info $package | Select-String -Quiet "Installed"))
  {
    scoop update $package
  } Else
  {
    scoop install $package
  }
}

function CargoInstall([string] $package)
{
  AssertCommandExists "cargo"
  cargo install --locked $package
}

function RustupAddComponent([string] $component)
{
  AssertCommandExists "rustup"
  rustup component add $component
}

function ExecuteCallbackOnList([scriptblock] $callback, [string] $list)
{
  foreach($line in (Get-Content $list | Where-Object {$_ -notmatch '^#.*'}))
  {
    if (-not ([string]::IsNullOrEmpty($line)))
    {
      $callback.Invoke($line)
    }
  }
}

# Install packages using scoop
ExecuteCallbackOnList $function:ScoopInstall "$HOME/.config/chezmoi/install_packages_list.txt"

# Install packages using cargo
ExecuteCallbackOnList $function:CargoInstall "$HOME/.config/chezmoi/cargo_install_packages_list.txt"

# Add rustup components
ExecuteCallbackOnList $function:RustupAddComponent "$HOME/.config/chezmoi/rustup_component_list.txt"

winget install Microsoft.DotNet.SDK.8

# Create a powershell profile
$PSHomeDir = "$HOME\Documents\PowerShell"
$ProfileName = "Profile.ps1"
If (!(Test-Path "$PSHomeDir"))
{
  New-Item -Path "$HOME\Documents" -Name "PowerShell" -ItemType "directory"
}
If (!(Test-Path "$PSHomeDir\$ProfileName"))
{
  New-Item -Path "$PSHomeDir" -Name "$ProfileName" -ItemType SymbolicLink -Target "$HOME\.config\powershell\profile.ps1" -Force
}

# zsh in msys2
$Msys2HomePath = "$HOME\scoop\apps\msys2\current\home\$env:username"
If (Test-Path -Path $Msys2HomePath)
{
  $Msys2HomeDir = Get-Item "$Msys2HomePath"
  If (!([bool]($Msys2HomeDir.Attributes -band [IO.FileAttributes]::ReparsePoint)))
  {
    Write-Output "Remove $Msys2HomePath"
    Remove-Item -LiteralPath "$Msys2HomePath" -Force -Recurse
  }
}
If (!(Test-Path -Path $Msys2HomePath))
{
  Write-Output "Create Symlink"
  New-Item -ItemType SymbolicLink -Path "$Msys2HomePath" -Target "$HOME" # symbolic link ~ -> $HOME
}

{{- end -}}



