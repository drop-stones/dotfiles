{{ if eq .chezmoi.os "windows" }}
function Install([string] $package)
{
  If ((scoop info $package | Select-String -Quiet "zoxide")) {
    scoop install $package
  } Else {
    scoop update $package
  }
}

# Install git
Install git

# Fonts
scoop bucket add nerd-fonts
Install Hack-NF-Mono

# Terminal Emulator
Install windows-terminal

# Editor
Install neovim

# Shell Prompt
Install starship

# Astronvim requirements
Install bottom
Install gdu
Install lazygit
Install pwsh
Install ripgrep
Install tree-sitter
Install unzip

# Languages
Install go
Install lua
Install lua-language-server
Install luarocks
Install nodejs
Install python
Install rust

Install mingw
winget install Microsoft.DotNet.SDK.8
npm install -g neovim

# Commands
Install bat
Install bottom
Install delta
Install dust
Install eza
Install fd
Install fzf
Install hexyl
Install hyperfine
Install procs
Install ripgrep
Install sd
Install tldr
Install tokei
Install zoxide

# Windows apps
Install autohotkey
Install powertoys

{{ if .enable.onepassword }}
# Password Manager
# Install 1password-cli
{{ end }}

# Cygwin only
if (Get-Command "pacman" -ErrorAction SilentlyContinue) {
  pacman -S tmux
}

If (!(Test-Path $PROFILE)) { New-Item -Path $PROFILE -Force }
# Add 'Invoke-Expression (& { (zoxide init powershell | Out-String) })' if not exists
If (!(Get-Content $PROFILE | Select-String -Quiet "zoxide")) {
  Add-Content -Path $PROFILE -Value "Invoke-Expression (& { (zoxide init powershell | Out-String) })"
}
# Add 'Invoke-Expression (&starship init powershell)' if not exists
If (!(Get-Content $PROFILE | Select-String -Quiet "starship")) {
  Add-Content -Path $PROFILE -Value "Invoke-Expression (&starship init powershell)"
}

# zsh in msys2
Install msys2
$Msys2HomePath = "$HOME\scoop\apps\msys2\current\home\$env:username"
If (Test-Path -Path $Msys2HomePath) {
  $Msys2HomeDir = Get-Item "$Msys2HomePath"
  If (!([bool]($Msys2HomeDir.Attributes -band [IO.FileAttributes]::ReparsePoint))) {
    echo "Remove $Msys2HomePath"
    Remove-Item -LiteralPath "$Msys2HomePath" -Force -Recurse
  }
}
If (!(Test-Path -Path $Msys2HomePath)) {
    echo "Create Symlink"
    New-Item -ItemType SymbolicLink -Path "$Msys2HomePath" -Target "$HOME" # symbolic link ~ -> $HOME
}
{{ end }}
